/** @file
 *  @brief Enable a number of NCEPLIBS-bufr subprograms to be called from within
 *  the C part of the library.
 *
 *  This header file defines signatures which wrap a number of native Fortran subprograms
 *  in the library.  It also contains prototypes for native C functions in the library as
 *  well as macros used throughout the C part of the library.
 *
 *  @author J. Ator @date 2003-11-04
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include "bufr_interface.h"

void arallocc(void);
void ardllocc(void);
void openrb(int nfile, char *ufile);
void openwb(int nfile, char *ufile);
void openab(int nfile, char *ufile);
void backbufr(int nfile);
void cewind(int nfile);
void closfb(int nfile);
int crdbufr(int nfile, int *bufr, int mxwrd);
void cwrbufr(int nfile, int *bufr, int nwrd);
void bort_exit(void);
int icvidx(int ii, int jj, int numjj);
void wrdesc(int desc, int *descary, int *ndescary);

/** Maximum number of BUFR files that can be connected to the NCEPLIBS-bufr
 * software (for reading or writing) at any one time. */
#define NFILES @NFILES@

/** Maximum number of child descriptors that can be included within
 * the sequence definition of a Table D descriptor, not counting the
 * recursive resolution of any child descriptors which may themselves
 * be Table D descriptors. */
#define MAXCD @MAXCD@

/** Maximum number of descriptors within Section 3 of a BUFR
 * message. */
#define MAXNC @MAXNC@

/** Maximum number of associated fields that can be in effect at any
 * given time for a Table B descriptor.*/
#define MXNAF @MXNAF@

/** Size of a character string needed to store an FXY value. */
#define FXY_STR_LEN 6

/** Character string containing minimum FXY value for a replication descriptor. */
#define MIN_FXY_REPL "101000"

/** Character string containing minimum FXY value for a Table D descriptor. */
#define MIN_FXY_TABLED "300000"

/** Character string containing maximum FXY value for a Table B descriptor. */
#define MAX_FXY_TABLEB "063255"

/** Size of a character string needed to store a mnemonic. */
#define NEMO_STR_LEN 8

/**
 * Convert an FXY value from its WMO bit-wise representation to its
 * six-character representation.
 *
 * Wraps cadn30() subroutine.
 *
 * @param idn - WMO bit-wise representation of FXY value.
 * @param adn - FXY value.
 * @param adn_str_len - Length of adn string.
 *
 * @author J. Ator @date 2004-08-18
 */
void cadn30_f(int idn, char *adn, int adn_str_len);

/**
 * Get the next index for storing an entry within an internal DX BUFR table.
 *
 * Wraps igetntbi() function.
 *
 * @param lun - File ID.
 * @param table_type - Type of internal DX BUFR table ('A', 'B', or 'D').
 *
 * @return Next available index within table_type.
 *
 * @author J. Ator @date 2009-03-23
 */
int igetntbi_f(int lun, char *table_type);

/**
 * Decode the scale factor, reference value, bit width, and units from a Table B
 * mnemonic definition.
 *
 * Wraps elemdx() subroutine.
 *
 * @param card - mnemonic definition card.
 * @param lun - File ID.
 *
 * @author J. Ator @date 2003-11-04
 */
void elemdx_f(char *card, int lun);

/**
 * Search for a Table B or Table D descriptor within the internal DX BUFR tables.
 *
 * Wraps numtbd() subroutine.
 *
 * @param lun - File ID.
 * @param idn - Bit-wise representation of FXY value.
 * @param nemo - Mnemonic.
 * @param nemo_str_len - Length of nemo string.
 * @param tab - Type of internal DX BUFR table ('B', or 'D').
 * @param iret - Positional index of idn within Table B or D, or 0 if not found.
 *
 * @author J. Ator @date 2003-11-04
 */
void numtbd_f(int lun, int idn, char *nemo, int nemo_str_len, char *tab, int *iret);

/**
 * Convert an FXY value from its 6 character representation to its WMO bit-wise
 * representation.
 *
 * Wraps ifxy() function.
 *
 * @param cfxy - FXY value.
 *
 * @return WMO bit-wise representation of FXY value.
 *
 * @author J. Ator @date 2023-04-07
 */
int ifxy_f(char *cfxy);

/**
 * Get the WMO bit-wise representation of the FXY value corresponding
 * to a child mnemonic of a Table D sequence.
 *
 * Wraps uptdd() subroutine.
 *
 * @param id - Positional index of parent mnemonic within internal Table D.
 * @param lun - File ID.
 * @param ient - Ordinal indicator of child mnemonic to be returned, or 0 to
 * request a count of the total number of child mnemonics.
 * @param iret - Total number of child mnemonics if ient = 0; otherwise
 * the WMO bit-wise representation of the FXY value corresponding to
 * the ient'th mnemonic.
 *
 * @author J. Ator @date 2003-11-04
 */
void uptdd_f(int id, int lun, int ient, int *iret);

/**
 * Check whether a specified mnemonic is a Table C marker operator.
 *
 * Wraps imrkopr() function.
 *
 * @param nemo - Mnemonic.
 *
 * @return
 * - 0 nemo is not a Table C marker operator.
 * - 1 nemo is a Table C marker operator.
 *
 * @author J. Ator @date 2016-05-04
 */
int imrkopr_f(char *nemo);

/**
 * Check whether a descriptor is WMO-standard.
 *
 * Wraps istdesc() function.
 *
 * @param idn - WMO bit-wise representation of FXY value for descriptor.
 *
 * @return
 * - 0 idn is not a WMO-standard descriptor.
 * - 1 idn is a WMO-standard descriptor.
 *
 * @author J. Ator @date 2004-08-18
 */
int istdesc_f(int idn);

/*
** On certain operating systems, the FORTRAN compiler appends an underscore
** to subprogram names in its object namespace.  Therefore, on such systems,
** a matching underscore must be appended to any C language references to
** the same subprogram names so that the linker can correctly resolve such
** references across the C <-> FORTRAN interface at link time.  This needs
** to be done for any subprogram that is either:
**   1) a C function, or
**   2) a FORTRAN subprogram called from C
*/
#ifdef UNDERSCORE
#define bort       bort_      /**< bort function. */
#define bort_exit  bort_exit_ /**< exit function. */
#define bvers      bvers_     /**< bvers function. */
#define cmpmsg     cmpmsg_    /**< cmpmsg function. */
#define gets1loc   gets1loc_  /**< gets1loc function. */
#define ibfms      ibfms_     /**< ibfms function. */
#define ichkstr    ichkstr_   /**< ichkstr function. */
#define igettdi    igettdi_   /**< igettdi function. */
#define ipkm       ipkm_      /**< ipkm function. */
#define ireadns    ireadns_   /**< ireadns function. */
#define iupb       iupb_      /**< iupb function. */
#define iupm       iupm_      /**< iupm function. */
#define openmb     openmb_    /**< openmb function. */
#define pktdd      pktdd_     /**< pktdd function. */
#define restd      restd_     /**< restd function. */
#define stntbi     stntbi_    /**< stntbi function. */
#define strnum     strnum_    /**< strnum function. */
#define stseq      stseq_     /**< stseq function. */
#define ufbseq     ufbseq_    /**< ufbseq function. */
#define wrdlen     wrdlen_    /**< wrdlen function. */
#endif

/**
 * In order to ensure that the C <-> FORTRAN interface works properly (and
 * portably!), the default size of an "INTEGER" declared in FORTRAN must be
 * identical to that of an "int" declared in C.  If this is not the case (e.g.
 * some FORTRAN compilers, most notably AIX via the -qintsize= option, allow the
 * sizes of INTEGERs to be definitively prescribed outside of the source code
 * itself!), then the following conditional directive (or a variant of it) can
 * be used to ensure that the size of an "int" in C remains identical to that
 * of an "INTEGER" in FORTRAN. */
#ifdef F77_INTSIZE_8
    typedef long f77int;
#else
    typedef int f77int;
#endif

/** Define the C object type that is equivalent to a REAL*8 in
 * Fortran. */
typedef double f77r8;

/*
** Declare prototypes for ANSI C compatibility.  This should be done for any
** subprogram that is either:
**   1) a C function, or
**   2) a FORTRAN subprogram called from C
*/

void restd(int *lunb, int *tddesc, int *nctddesc, int *ctddesc);
void stseq(int *lun, int *irepct, int *idn, char *nemo, char *cseq, int *cdesc, int *ncdesc);

/**
 * Wraps bort() subroutine.
 *
 * @param str - Error message.
 * @param s1 - Extra C-Fortran interface argument containing length of str variable.
 *
 * @author J. Ator @date 2003-11-04
 */
void bort( char *str, size_t s1 );

/**
 * Wraps bvers() subroutine.
 *
 * @param cverstr - Version string.
 * @param s1 - Extra C-Fortran interface argument containing length of cverstr variable.
 *
 * @author J. Ator @date 2009-03-23
 */
void bvers( char *cverstr, size_t s1 );

/**
 * Wraps cmpmsg() subroutine.
 *
 * @param cf - Flag indicating whether future BUFR output messages are to be compressed.
 * @param s1 - Extra C-Fortran interface argument containing length of cf variable.
 *
 * @author J. Ator @date 2005-03-09
 */
void cmpmsg( char *cf, size_t s1 );

/**
 * Wraps gets1loc() subroutine.
 *
 * @param s1mnem - Value whose location within Section 1 is to be determined.
 * @param iben - BUFR edition number.
 * @param isbyt - Number of starting byte within Section 1 for s1mnem.
 * @param iwid - Bit width for s1mnem.
 * @param iret - Return code.
 * @param s1 - Extra C-Fortran interface argument containing length of s1mnem variable.
 *
 * @author J. Ator @date 2005-11-29
 */
void gets1loc( char *s1mnem, f77int *iben, f77int *isbyt, f77int *iwid, f77int *iret, size_t s1 );

/**
 * Wraps ibfms() function.
 *
 * @param r8val - Data value.
 *
 * @return
 * - 0 r8val is not "missing"
 * - 1 r8val is "missing"
 *
 * @author J. Ator @date 2007-01-19
 */
f77int ibfms( f77r8 *r8val );

/**
 * Wraps ichkstr() function.
 *
 * @param str - Character string.
 * @param chr - Character array.
 * @param n - Number of characters to be compared.
 * @param s1 - Extra C-Fortran interface argument containing length of str variable.
 * @param s2 - Extra C-Fortran interface argument containing length of chr variable.
 *
 * @return
 * - 0 first n characters of str and chr are equivalent
 * - 1 first n characters of str and chr are not equivalent
 *
 * @author J. Ator @date 2005-11-29
 */
f77int ichkstr ( char *str, char *chr, f77int *n, size_t s1, size_t s2 );

/**
 * Wraps igettdi() function.
 *
 * @param iflag - Processing flag.
 *
 * @return
 * - -1, if iflag was input as 0.
 * - next usable scratch Table D index, otherwise.
 *
 * @author J. Ator @date 2009-03-23
 */
f77int igettdi( f77int *iflag );

/**
 * Wraps ipkm() subroutine.
 *
 * @param cbay - String.
 * @param nbyt - Number of bytes to encode within cbay.
 * @param n - Value to be encoded into cbay.
 * @param s1 - Extra C-Fortran interface argument containing length of cbay variable.
 *
 * @author J. Ator @date 2003-11-04
 */
void ipkm( char *cbay, f77int *nbyt, f77int *n, size_t s1 );

/**
 * Wraps ireadns() function.
 *
 * @param lunit - Fortran logical unit number for BUFR file.
 * @param subset - Table A mnemonic.
 * @param idate - Date-time stored within Section 1.
 * @param s1 - Extra C-Fortran interface argument containing length of subset variable.
 *
 * @return
 * - 0 new BUFR data subset was successfully read
 * - -1 there are no more BUFR data subsets in lunit
 *
 * @author J. Ator @date 2003-11-04
 */
f77int ireadns( f77int *lunit, char *subset, f77int *idate, size_t s1 );

/**
 * Wraps iupb() function.
 *
 * @param mbay - Array containing encoded value.
 * @param nbyt - Starting byte within mbay.
 * @param nbit - Number of bits to decode.
 *
 * @return Decoded value.
 *
 * @author J. Ator @date 2003-11-04
 */
f77int iupb( f77int *mbay, f77int *nbyt, f77int *nbit );

/**
 * Wraps iupm() function.
 *
 * @param cbay - String.
 * @param nbits - Number of bits to decode from within cbay.
 * @param s1 - Extra C-Fortran interface argument containing length of cbay variable.
 *
 * @return Decoded value.
 *
 * @author J. Ator @date 2003-11-04
 */
f77int iupm( char *cbay, f77int *nbits, size_t s1 );

/**
 * Wraps openmb() subroutine.
 *
 * @param lunit - Fortran logical unit number for BUFR file.
 * @param subset - Table A mnemonic.
 * @param jdate - Date-time to be stored within Section 1.
 * @param s1 - Extra C-Fortran interface argument containing length of subset variable.
 *
 * @author J. Ator @date 2003-11-04
 */
void openmb( f77int *lunit, char *subset, f77int *jdate, size_t s1 );

/**
 * Wraps pktdd() subroutine.
 *
 * @param id - Index of parent mnemonic within internal arrays.
 * @param lun - I/O stream index into internal arrays.
 * @param idn - Bit-wise representation of FXY value for child mnemonic.
 * @param iret - Return code.
 *
 * @author J. Ator @date 2003-11-04
 */
void pktdd( f77int *id, f77int *lun, f77int *idn, f77int *iret );

/**
 * Wraps stntbi() subroutine.
 *
 * @param n - Index into internal Table B or D for new entry.
 * @param lun - I/O stream index into internal arrays.
 * @param numb - FXY number for new entry.
 * @param nemo - mnemonic corresponding to numb.
 * @param celsq - Element or sequence definition corresponding to numb.
 * @param s1 - Extra C-Fortran interface argument containing length of numb variable.
 * @param s2 - Extra C-Fortran interface argument containing length of nemo variable.
 * @param s3 - Extra C-Fortran interface argument containing length of celsq variable.
 *
 * @author J. Ator @date 2009-03-23
 */
void stntbi( f77int *n, f77int *lun, char *numb, char *nemo, char *celsq, size_t s1, size_t s2, size_t s3 );

/**
 * Wraps strnum() subroutine.
 *
 * @param str - String.
 * @param num - Value decoded from str.
 * @param iret - Return code.
 * @param s1 - Extra C-Fortran interface argument containing length of str variable.
 *
 * @author J. Ator @date 2003-11-04
 */
void strnum( char *str, f77int *num, f77int *iret, size_t s1 );

/**
 * Wraps ufbseq() subroutine.
 *
 * @param lunit - Fortran logical unit number for BUFR file.
 * @param usr - Data values.
 * @param i1 - First dimension of usr.
 * @param i2 - Second dimension of usr.
 * @param iret - Number of replications of str read or written.
 * @param str - Mnemonic string.
 * @param s1 - Extra C-Fortran interface argument containing length of str variable.
 *
 * @author J. Ator @date 2003-11-04
 */
void ufbseq( f77int *lunit, f77r8 *usr, f77int *i1, f77int *i2, f77int *iret, char *str, size_t s1 );

/**
 * Wraps wrdlen() subroutine.
 *
 * @author J. Ator @date 2003-11-04
 */
void wrdlen( void );
