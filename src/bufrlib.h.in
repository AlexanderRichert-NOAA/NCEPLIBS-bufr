/** @file
 *  @brief Define signatures to enable a number of BUFRLIB
 *  subprograms to be called directly from C application programs.
 *
 *  <p>This header file defines the signatures for all
 *  BUFRLIB subprograms which are native C functions, or which are
 *  native Fortran subroutines but can be called directly from C
 *  application programs without the use of wrapper functions.
 *  This header file also contains macros used throughout the C
 *  portion of the BUFRLIB.
 *
 *  @author J.Ator @date 2003-11-04
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

/** Maximum number of BUFR files that can be connected to the BUFRLIB
 * software (for reading or writing) at any one time. */
#define NFILES @NFILES@

/** Maximum number of child descriptors that can be included within
 * the sequence definition of a Table D descriptor, not counting the
 * recursive resolution of any child descriptors which may themselves
 * be Table D descriptors. */
#define MAXCD @MAXCD@

/** Maximum number of descriptors within Section 3 of a BUFR
 * message. */
#define MAXNC @MAXNC@

/** Maximum number of associated fields that can be in effect at any
 * given time for a Table B descriptor.*/
#define MXNAF @MXNAF@

/*
** On certain operating systems, the FORTRAN compiler appends an underscore
** to subprogram names in its object namespace.  Therefore, on such systems,
** a matching underscore must be appended to any C language references to
** the same subprogram names so that the linker can correctly resolve such
** references across the C <-> FORTRAN interface at link time.  This needs
** to be done for any subprogram that is either:
**   1) a C function, or
**   2) a FORTRAN subprogram called from C
*/
#ifdef UNDERSCORE
#define arallocc   arallocc_  /**< arallocc function. */
#define ardllocc   ardllocc_  /**< ardllocc function. */
#define bort       bort_      /**< bort function. */
#define bort_exit  bort_exit_ /**< exit function. */
#define bvers      bvers_     /**< bvers function. */
#define cadn30     cadn30_    /**< cadn30 function. */
#define closbf     closbf_    /**< closbf function. */
#define cmpia      cmpia_     /**< cmpia function. */
#define cmpmsg     cmpmsg_    /**< cmpmsg function. */
#define elemdx     elemdx_    /**< elemdx function. */
#define gets1loc   gets1loc_  /**< gets1loc function. */
#define ibfms      ibfms_     /**< ibfms function. */
#define ichkstr    ichkstr_   /**< ichkstr function. */
#define icvidx     icvidx_    /**< icvidx function. */
#define ifxy       ifxy_      /**< ifxy function. */
#define igetntbi   igetntbi_  /**< igetntbi function. */
#define igetprm    igetprm_   /**< igetprm function. */
#define igettdi    igettdi_   /**< igettdi function. */
#define imrkopr    imrkopr_   /**< imrkopr function. */
#define ipkm       ipkm_      /**< ipkm function. */
#define ireadns    ireadns_   /**< ireadns function. */
#define istdesc    istdesc_   /**< istdesc function. */
#define iupb       iupb_      /**< iupb function. */
#define iupbs01    iupbs01_   /**< iupbs01 function. */
#define iupm       iupm_      /**< iupm function. */
#define maxout     maxout_    /**< maxout function. */
#define nemtab     nemtab_    /**< nemtab function. */
#define nemtbb     nemtbb_    /**< nemtbb function. */
#define nummtb     nummtb_    /**< nummtb function. */
#define numtbd     numtbd_    /**< numtbd function. */
#define openmb     openmb_    /**< openmb function. */
#define pktdd      pktdd_     /**< pktdd function. */
#define restd      restd_     /**< restd function. */
#define stntbi     stntbi_    /**< stntbi function. */
#define strnum     strnum_    /**< strnum function. */
#define stseq      stseq_     /**< stseq function. */
#define ufbint     ufbint_    /**< ufbint function. */
#define ufbseq     ufbseq_    /**< ufbseq function. */
#define uptdd      uptdd_     /**< uptdd function. */
#define wrdesc     wrdesc_    /**< wrdesc function. */
#define wrdlen     wrdlen_    /**< wrdlen function. */
#endif

/**
 * In order to ensure that the C <-> FORTRAN interface works properly (and
 * portably!), the default size of an "INTEGER" declared in FORTRAN must be 
 * identical to that of an "int" declared in C.  If this is not the case (e.g.
 * some FORTRAN compilers, most notably AIX via the -qintsize= option, allow the
 * sizes of INTEGERs to be definitively prescribed outside of the source code
 * itself!), then the following conditional directive (or a variant of it) can
 * be used to ensure that the size of an "int" in C remains identical to that
 * of an "INTEGER" in FORTRAN. */ 
#ifdef F77_INTSIZE_8
    typedef long f77int;
#else
    typedef int f77int;
#endif

/** Define the C object type that is equivalent to a REAL*8 in
 * Fortran. */
typedef double f77r8; 

/*
** Declare prototypes for ANSI C compatibility.  This should be done for any
** subprogram that is either:
**   1) a C function, or
**   2) a FORTRAN subprogram called from C
*/
void arallocc( void );
void ardllocc( void );

/**
 * Abort.
 *
 * @param c
 * @param s
 *
 * @author J.Ator @date 2003-11-04
 */
void bort( char *c, size_t s);
void bort_exit( void );

/**
 * ???
 *
 * @param c
 * @param s
 *
 * @author J.Ator @date 2003-11-04
 */
void bvers( char *c, size_t s); 

/**
 * ???
 *
 * @param f
 * @param c
 * @param s
 *
 * @author J.Ator @date 2003-11-04
 */
void cadn30( f77int *f, char *c, size_t s); 

/**
 * ???
 *
 * @param f
 *
 * @author J.Ator @date 2003-11-04
 */
void closbf( f77int *f );

int cmpia( const void *v1, const void *v2 );

/**
 * ???
 *
 * @param c
 * @param s
 *
 * @author J.Ator @date 2003-11-04
 */
void cmpmsg( char *c, size_t s);

/**
 * ???
 *
 * @param c
 * @param f
 * @param s
 *
 * @author J.Ator @date 2003-11-04
 */
void elemdx( char *c, f77int *f, size_t s);

/**
 * ???
 *
 * @param c
 * @param f1
 * @param f2
 * @param f3
 * @param f4
 * @param s
 *
 * @author J.Ator @date 2003-11-04
 */
void gets1loc( char *c, f77int *f1, f77int *f2, f77int *f3, f77int *f4, size_t s);

/**
 * ???
 *
 * @param f
 *
 * @return ???
 *
 * @author J.Ator @date 2003-11-04
 */
f77int ibfms( f77r8 *f );

/**
 * ???
 *
 * @param c1
 * @param c2
 * @param f
 * @param s1
 * @param s2
 *
 * @return ???
 *
 * @author J.Ator @date 2003-11-04
 */
f77int ichkstr ( char *c1, char *c2, f77int *f, size_t s1, size_t s2);

f77int icvidx ( f77int *f1, f77int *f2, f77int *f3 );

/**
 * ???
 *
 * @param c
 * @param s
 *
 * @return ???
 *
 * @author J.Ator @date 2003-11-04
 */
f77int ifxy( char *c, size_t s);

/**
 * ???
 *
 * @param f
 * @param c
 * @param s
 *
 * @return ???
 *
 * @author J.Ator @date 2003-11-04
 */
f77int igetntbi( f77int *f, char *c, size_t s);

/**
 * ???
 *
 * @param c
 * @param s
 *
 * @return ???
 *
 * @author J.Ator @date 2003-11-04
 */
f77int igetprm( char *c, size_t s);

/**
 * ???
 *
 * @param f
 *
 * @return ???
 *
 * @author J.Ator @date 2003-11-04
 */
f77int igettdi( f77int *f );

/**
 * ???
 *
 * @param c
 * @param s
 *
 * @return ???
 *
 * @author J.Ator @date 2003-11-04
 */
f77int imrkopr( char *c, size_t s);

/**
 * ???
 *
 * @param c
 * @param f1
 * @param f2
 * @param s
 *
 * @author J.Ator @date 2003-11-04
 */
void ipkm( char *c, f77int *f1, f77int *f2, size_t s);

/**
 * ???
 *
 * @param f1
 * @param c
 * @param f2
 * @param s
 *
 * @return ???
 *
 * @author J.Ator @date 2003-11-04
 */
f77int ireadns( f77int *f1, char *c, f77int *f2, size_t s);

/**
 * ???
 *
 * @param f
 *
 * @return ???
 *
 * @author J.Ator @date 2003-11-04
 */
f77int istdesc( f77int *f );

/**
 * ???
 *
 * @param f1
 * @param f2
 * @param f3
 *
 * @return ???
 *
 * @author J.Ator @date 2003-11-04
 */
f77int iupb( f77int *f1, f77int *f2, f77int *f3 );

/**
 * ???
 *
 * @param f
 * @param c
 * @param s
 *
 * @return ???
 *
 * @author J.Ator @date 2003-11-04
 */
f77int iupbs01 ( f77int *f, char *c, size_t s);

/**
 * ???
 *
 * @param c
 * @param f
 * @param s
 *
 * @return ???
 *
 * @author J.Ator @date 2003-11-04
 */
f77int iupm ( char *c, f77int *f, size_t s);

/**
 * ???
 *
 * @param f
 *
 * @author J.Ator @date 2003-11-04
 */
void maxout( f77int *f );

/**
 * ???
 *
 * @param f1
 * @param c1
 * @param f2
 * @param c2
 * @param f3
 * @param s1
 * @param s2
 *
 * @author J.Ator @date 2003-11-04
 */
void nemtab( f77int *f1, char *c1, f77int *f2, char *c2, f77int *f3, size_t s1, size_t s2);

/**
 * ???
 *
 * @param f1
 * @param f2
 * @param c
 * @param f3
 * @param f4
 * @param f5
 * @param s
 *
 * @author J.Ator @date 2003-11-04
 */
void nemtbb( f77int *f1, f77int *f2, char *c, f77int *f3, f77int *f4, f77int *f5, size_t s);

void nummtb( f77int *f1, char *c, f77int *f2);

/**
 * ???
 *
 * @param f1
 * @param f2
 * @param c1
 * @param c2
 * @param f3
 * @param s1
 * @param s2
 *
 * @author J.Ator @date 2003-11-04
 */
void numtbd( f77int *f1, f77int *f2, char *c1, char *c2, f77int *f3, size_t s1, size_t s2);

/**
 * ???
 *
 * @param f1
 * @param c
 * @param f2
 * @param s
 *
 * @author J.Ator @date 2003-11-04
 */
void openmb( f77int *f1, char *c, f77int *f2, size_t s);

/**
 * ???
 *
 * @param f1
 * @param f2
 * @param f3
 * @param f4
 *
 * @author J.Ator @date 2003-11-04
 */
void pktdd( f77int *f1, f77int *f2, f77int *f3, f77int *f4 );

/**
 * ???
 *
 * @param f1
 * @param f2
 * @param f3
 * @param f4
 *
 * @author J.Ator @date 2003-11-04
 */
void restd( f77int *f1, f77int *f2, f77int *f3, f77int *f4 );

/**
 * ???
 *
 * @param f1
 * @param f2
 * @param c1
 * @param c2
 * @param c3
 * @param s1
 * @param s2
 * @param s3
 *
 * @author J.Ator @date 2003-11-04
 */
void stntbi( f77int *f1, f77int *f2, char *c1, char *c2, char *c3, size_t s1, size_t s2, size_t s3);

/**
 * ???
 *
 * @param c
 * @param f
 * @param s
 *
 * @author J.Ator @date 2003-11-04
 */
void strnum( char *c, f77int *f, size_t s);

/**
 * ???
 *
 * @param f1
 * @param f2
 * @param f3
 * @param c1
 * @param c2
 * @param f4
 * @param f5
 *
 * @author J.Ator @date 2003-11-04
 */
void stseq( f77int *f1, f77int *f2, f77int *f3, char *c1, char *c2, f77int *f4, f77int *f5 );

/**
 * ???
 *
 * @param f1
 * @param f2
 * @param f3
 * @param f4
 * @param f5
 * @param c
 * @param s
 *
 * @author J.Ator @date 2003-11-04
 */
void ufbint( f77int *f1, f77r8 *f2, f77int *f3, f77int *f4, f77int *f5, char *c, size_t s);

/**
 * ???
 *
 * @param f1
 * @param f2
 * @param f3
 * @param f4
 * @param f5
 * @param c
 * @param s
 *
 * @author J.Ator @date 2003-11-04
 */
void ufbseq( f77int *f1, f77r8 *f2, f77int *f3, f77int *f4, f77int *f5, char *c, size_t s);

/**
 * ???
 *
 * @param f1
 * @param f2
 * @param f3
 * @param f4
 *
 * @author J.Ator @date 2003-11-04
 */
void uptdd( f77int *f1, f77int *f2, f77int *f3, f77int * f4);

/**
 * ???
 *
 * @param f1
 * @param f2
 * @param f3
 *
 * @author J.Ator @date 2003-11-04
 */
void wrdesc( f77int f1, f77int *f2, f77int *f3 );

/**
 * ???
 *
 * @author J.Ator @date 2003-11-04
 */
void wrdlen( void );
