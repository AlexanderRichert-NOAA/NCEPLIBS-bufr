/** @file
 *  @brief Define signatures to enable a number of BUFRLIB
 *  subprograms to be called directly from C application programs.
 *
 *  <p>This header file defines the signatures for all
 *  BUFRLIB subprograms which are native C functions, or which are
 *  native Fortran subroutines but can be called directly from C
 *  application programs without the use of wrapper functions.
 *  This header file also contains macros used throughout the C
 *  portion of the BUFRLIB.
 *
 *  @author J.Ator
 *  @date 2003-11-04
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

/** Maximum number of BUFR files that can be connected to the BUFRLIB
 * software (for reading or writing) at any one time. */
#define NFILES @NFILES@

/** Maximum number of child descriptors that can be included within
 * the sequence definition of a Table D descriptor, not counting the
 * recursive resolution of any child descriptors which may themselves
 * be Table D descriptors. */
#define MAXCD @MAXCD@

/** Maximum number of descriptors within Section 3 of a BUFR
 * message. */
#define MAXNC @MAXNC@

/** Maximum number of associated fields that can be in effect at any
 * given time for a Table B descriptor.*/
#define MXNAF @MXNAF@

/*
** On certain operating systems, the FORTRAN compiler appends an underscore
** to subprogram names in its object namespace.  Therefore, on such systems,
** a matching underscore must be appended to any C language references to
** the same subprogram names so that the linker can correctly resolve such
** references across the C <-> FORTRAN interface at link time.  This needs
** to be done for any subprogram that is either:
**   1) a C function, or
**   2) a FORTRAN subprogram called from C
*/
#ifdef UNDERSCORE
#define arallocc   arallocc_ /** arallocc function. */
#define ardllocc   ardllocc_ /** ardllocc function. */
#define bort       bort_ /** bort function. */
#define bort_exit  bort_exit_ /** exit function. */
#define bvers      bvers_ /** bvers function. */
#define cadn30     cadn30_ /** cadn30 function. */
#define closbf     closbf_ /** closbf function. */
#define cmpia      cmpia_ /** cmpia function. */
#define cmpmsg     cmpmsg_ /** cmpmsg function. */
#define elemdx     elemdx_ /** elemdx function. */
#define gets1loc   gets1loc_ /** gets1loc function. */
#define ibfms      ibfms_ /** ibfms function. */
#define ichkstr    ichkstr_ /** ichkstr function. */
#define icvidx     icvidx_ /** icvidx function. */
#define ifxy       ifxy_ /** ifxy function. */
#define igetntbi   igetntbi_ /** igetntbi function. */
#define igetprm    igetprm_ /** igetprm function. */
#define igettdi    igettdi_ /** igettdi function. */
#define imrkopr    imrkopr_ /** imrkopr function. */
#define ipkm       ipkm_ /** ipkm function. */
#define ireadns    ireadns_ /** ireadns function. */
#define istdesc    istdesc_ /** istdesc function. */
#define iupb       iupb_ /** iupb function. */
#define iupbs01    iupbs01_ /** iupbs01 function. */
#define iupm       iupm_ /** iupm function. */
#define maxout     maxout_ /** maxout function. */
#define nemtab     nemtab_ /** nemtab function. */
#define nemtbb     nemtbb_ /** nemtbb function. */
#define nummtb     nummtb_ /** nummtb function. */
#define numtbd     numtbd_ /** numtbd function. */
#define openmb     openmb_ /** openmb function. */
#define pktdd      pktdd_ /** pktdd function. */
#define restd      restd_ /** restd function. */
#define stntbi     stntbi_ /** stntbi function. */
#define strnum     strnum_ /** strnum function. */
#define stseq      stseq_ /** stseq function. */
#define ufbint     ufbint_ /** ufbint function. */
#define ufbseq     ufbseq_ /** ufbseq function. */
#define uptdd      uptdd_ /** uptdd function. */
#define wrdesc     wrdesc_ /** wrdesc function. */
#define wrdlen     wrdlen_ /** wrdlen function. */
#endif

/**
 * In order to ensure that the C <-> FORTRAN interface works properly (and
 * portably!), the default size of an "INTEGER" declared in FORTRAN must be 
 * identical to that of an "int" declared in C.  If this is not the case (e.g.
 * some FORTRAN compilers, most notably AIX via the -qintsize= option, allow the
 * sizes of INTEGERs to be definitively prescribed outside of the source code
 * itself!), then the following conditional directive (or a variant of it) can
 * be used to ensure that the size of an "int" in C remains identical to that
 * of an "INTEGER" in FORTRAN. */ 
#ifdef F77_INTSIZE_8
    typedef long f77int;
#else
    typedef int f77int;
#endif

/** Define the C object type that is equivalent to a REAL*8 in
 * Fortran. */
typedef double f77r8; 

/*
** Declare prototypes for ANSI C compatibility.  This should be done for any
** subprogram that is either:
**   1) a C function, or
**   2) a FORTRAN subprogram called from C
*/
void arallocc( void );
void ardllocc( void );
void bort( char *, size_t );
void bort_exit( void );
void bvers( char *, size_t ); 
void cadn30( f77int *, char *, size_t ); 
void closbf( f77int * );
int cmpia( const void *, const void * );
void cmpmsg( char *, size_t );
void elemdx( char *, f77int *, size_t );
void gets1loc( char *, f77int *, f77int *, f77int *, f77int *, size_t );
f77int ibfms( f77r8 * );
f77int ichkstr ( char *, char *, f77int *, size_t, size_t );
f77int icvidx ( f77int *, f77int *, f77int * );
f77int ifxy( char *, size_t );
f77int igetntbi( f77int *, char *, size_t );
f77int igetprm( char *, size_t );
f77int igettdi( f77int * );
f77int imrkopr( char *, size_t );
void ipkm( char *, f77int *, f77int *, size_t );
f77int ireadns( f77int *, char *, f77int *, size_t );
f77int istdesc( f77int * );
f77int iupb( f77int *, f77int *, f77int * );
f77int iupbs01 ( f77int *, char *, size_t );
f77int iupm ( char *, f77int *, size_t );
void maxout( f77int * );
void nemtab( f77int *, char *, f77int *, char *, f77int *, size_t, size_t );
void nemtbb( f77int *, f77int *, char *, f77int *, f77int *, f77int *, size_t );
void nummtb( f77int *, char *, f77int * );
void numtbd( f77int *, f77int *, char *, char *, f77int *, size_t, size_t );
void openmb( f77int *, char *, f77int *, size_t );
void pktdd( f77int *, f77int *, f77int *, f77int * );
void restd( f77int *, f77int *, f77int *, f77int * );
void stntbi( f77int *, f77int *, char *, char *, char *, size_t, size_t, size_t );
void strnum( char *, f77int *, size_t );
void stseq( f77int *, f77int *, f77int *, char *, char *, f77int *, f77int * );
void ufbint( f77int *, f77r8 *, f77int *, f77int *, f77int *, char *, size_t );
void ufbseq( f77int *, f77r8 *, f77int *, f77int *, f77int *, char *, size_t );
void uptdd( f77int *, f77int *, f77int *, f77int * );
void wrdesc( f77int, f77int *, f77int * );
void wrdlen( void );
