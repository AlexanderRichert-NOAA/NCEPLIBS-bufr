/** @file
 *  @brief C language code for debufr utility.
 */

#include <ctype.h>
#include <string.h>
#include <stdio.h>
#include <libgen.h>
#include <unistd.h>

#include "bufrlib.h"
#include "cobfl.h"

#ifdef UNDERSCORE
#define fdebufr fdebufr_
#define prtusage prtusage_
#endif

void fdebufr( char *, char *, f77int *, char *, char *, char *, char *, char *,
              size_t, size_t, size_t, size_t, size_t, size_t, size_t );
void prtusage( char * );

#define MXFLEN 500
#define MXFLEN_TBLFIL (MXFLEN+50)

/**
 * This function prints program usage information to standard output.
 *   
 * @author J. Ator
 * @date 2018-03-01
 *
 * @param[in]  prgnam -- char*: [path/]name of program executable
 *
 * <b>Program history log:</b>
 * | Date | Programmer | Comments |
 * | -----|------------|----------|
 * | 2018-03-01 |  J. Ator | Original author |
 */

void prtusage( char *prgnam ) {
	printf( "\nUSAGE:\n" );
	printf( "  %s [-v] [-h] [-b] [-c] [-m] [-o outfile] [-t tabledir] [-f tablefil] [-p prmstg] bufrfile\n\n", prgnam );
	printf( "\nWHERE:\n" );
	printf( "    -v        prints program version information and exits\n\n" );
	printf( "    -h        prints program help and usage information and exits\n\n" );
	printf( "    -b        specifies the \"basic\" option, meaning that only the\n" );
	printf( "              information in Sections 0-3 will be decoded from each\n" );
	printf( "              BUFR message in the bufrfile, and no attempt will be\n" );
	printf( "              made to decode the data in Section 4\n\n" );
	printf( "    -c        specifies that code and flag table meanings should not\n" );
	printf( "              be read from master BUFR tables and included in the output;\n" );
	printf( "              otherwise this feature is enabled by default\n\n" );
	printf( "    -m        specifies that master BUFR tables will be used to\n" );
	printf( "              decode the data messages in the file, regardless of\n" );
	printf( "              whether it contains any embedded DX BUFR table messages.\n" );
	printf( "              This option can be used to view the actual contents of\n" );
	printf( "              DX BUFR table messages, which otherwise would not be\n" );
	printf( "              printed in the output listing.\n\n" );
	printf( "    outfile   [path/]name of file to contain verbose output listing.\n" );
	printf( "              The default is \"bufrfilename.debufr.out\" in the current\n" );
	printf( "              working directory, where bufrfilename is the basename of\n" );
	printf( "              the bufrfile (i.e. bufrfile with any preceding [path/]\n" );
	printf( "              removed).\n\n" );
	printf( "    tabledir  [path/]name of directory containing tables to be used\n" );
	printf( "              for decoding.  This directory contains the DX BUFR tables\n" );
	printf( "              file to be used (if one was specified via the -f option),\n" );
	printf( "              or it may contain all of the master BUFR tables when these\n" );
	printf( "              are being used to decode a file.  If unspecified, the\n" );
	printf( "              default directory location is\n" );
	printf( "	       \"@MASTER_TABLE_DIR@\"\n\n" );
	printf( "    tablefil  file within tabledir containing DX BUFR tables to be used\n" );
	printf( "              for decoding.\n\n" );
	printf( "     prmstg   string of comma-separated PARAMETER=VALUE pairs, up to a\n" );
	printf( "              maximum of 20.  For each pair, the dynamic allocation\n" );
  	printf( "              PARAMETER will be set to VALUE within the underlying\n" );
	printf( "              BUFRLIB software, overriding the default value that would\n" );
	printf( "              otherwise be used.  A complete list of parameters that can\n" );
	printf( "              be dynamically sized is included within the documentation\n" );
	printf( "              for BUFRLIB function isetprm.\n\n" );
	printf( "    bufrfile  [path/]name of BUFR file to be decoded\n\n" );
}

/**
 * This program decodes a BUFR file and generates a verbose
 * listing of the contents.
 *
 * <p>If a [DX BUFR Tables](@ref dfbftab) file is
 * specified (using the -f option) or if the specified BUFR file
 * contains an embedded DX BUFR tables message as the first
 * message in the file, then this information is used to decode
 * the data messages in the file.  Otherwise, or whenever the -m option
 * is specified, [master BUFR tables](@ref dfbfmstab) are read and used
 * to decode the data messages in the file.
 *   
 * @author J. Ator
 * @date 2009-07-01
 *
 * <b>Usage</b><br>
 * <pre>
 *
 *   debufr [-v] [-h] [-b] [-c] [-m] [-o outfile] [-t tabledir] [-f tablefil] [-p prmstg] bufrfile
 *
 *     where:
 *       -v        prints version information and exits
 *
 *       -h        prints program help and usage information and exits
 *
 *       -b        specifies the "basic" option, meaning that only the
 *                 information in Sections 0-3 will be decoded from each
 *                 BUFR message in the bufrfile, and no attempt will be
 *                 made to decode the data in Section 4
 *
 *       -c        specifies that code and flag table meanings should not
 *                 be read from master BUFR tables and included in the
 *                 output; otherwise this feature is enabled by default
 *
 *       -m        specifies that master BUFR tables will be used to
 *                 decode the data messages in the file, regardless of
 *                 whether it contains any embedded DX BUFR table
 *                 messages.  This option can be used to view the actual
 *                 contents of DX BUFR table messages, which otherwise
 *                 would not be printed in the output listing.
 *
 *       outfile   [path/]name of file to contain verbose output listing.
 *                 The default is "bufrfilename.debufr.out" in the current
 *                 working directory, where bufrfilename is the basename of
 *                 the bufrfile (i.e. bufrfile with any preceding [path/]
 *                 removed).
 *
 *       tabledir  [path/]name of directory containing tables to be used
 *                 for decoding.  This directory contains the DX BUFR
 *                 tables file to be used (if one was specified
 *                 via the -f option), or it may contain all of the master
 *                 BUFR tables when these are being used to decode a
 *                 file.  If unspecified, the default directory location is
 *                 the defined value of the MASTER_TABLE_DIR macro when the
 *                 utility was built.
 *
 *       tablefil  file within tabledir containing DX BUFR tables
 *                 to be used for decoding.
 *
 *       prmstg    string of comma-separated PARAMETER=VALUE pairs, up to a
 *                 maximum of 20.  For each pair, the dynamic allocation
 *                 PARAMETER will be set to VALUE within the underlying
 *                 BUFRLIB software, overriding the default value that
 *                 would otherwise be used.  A complete list of parameters
 *                 that can be dynamically sized is included within the
 *                 documentation for BUFRLIB function isetprm().
 *
 *       bufrfile  [path/]name of BUFR file to be decoded
 * </pre>
 *
 * @remarks
 * - Fortran logical unit numbers 51, 90, 91, 92 and 93 are reserved
 * for use within this program.
 *
 * <b>Program history log:</b>
 * | Date | Programmer | Comments |
 * | -----|------------|----------|
 * | 2009-07-01 | J. Ator | Original author |
 * | 2012-06-18 | J. Ator | Modified to allow decoding of BUFR files based on NCEP DX dictionary table information.  The program can now process any files that previously required the use of ckbufr. |
 * | 2012-12-07 | J. Ator | Modified to add -m and -v options and inline version of OPENBT subroutine for mixed BUFR files |
 * | 2013-10-07 | J. Ator | Print Section 1 tank receipt time information for NCEP/NCO BUFR messages if available |
 * | 2013-11-15 | J. Ator | Add -h option and check for non-existent tablefil |
 * | 2014-09-15 | J. Ator | Change default path for tabledir, change default name for outfile, and confirm outfile is writeable |
 * | 2018-01-19 | J. Ator | Add print of code and flag table meanings |
 * | 2018-04-09 | J. Ator | Add -c option to turn off print of code and flag table meanings (default is "on") |
 * | 2018-09-05 | J. Ator | Add -p option to pass in one or more BUFRLIB dynamic allocation parameters to override default settings |
 * | 2019-02-01 | J. Ator | Remove limit on length of prmstg, and allow up to 20 PARAMETER=VALUE pairs |
 * | 2021-03-02 | J. Ator | Add missing #include files, remove unused errflg variable, and other general cleanup |
 * | 2022-04-05 | J. Ator | Increase MXFLEN to 500, use MXFLEN_TBLFIL |
 */

int main( int argc, char *argv[ ] ) {

	int ch;

	char basic = 'N';
	char forcemt = 'N';
	char cfms = 'Y';
	char io = 'r';
	char tbldir[MXFLEN] =
		"@MASTER_TABLE_DIR_C@";
	char outfile[MXFLEN];
	char wkstr[MXFLEN];
	char wkstr2[MXFLEN];
	char tblfil[MXFLEN_TBLFIL];
	char prmstg[300] = "NULLPSTG";
	char bvstr[9] = "        ";

	unsigned short ii;

	f77int lentd;
	
	/*
	**  Get and process the valid options from the command line:
	*/
	wkstr[0] = '\0';  /* initialize to empty string */
	outfile[0] = '\0';  /* initialize to empty string */
	while ( ( ch = getopt ( argc, argv, "vhbcmo:t:f:p:" ) ) != EOF ) {
	    switch ( ch ) {
		case 'v':
		    bvers ( bvstr, sizeof(bvstr) );
		    /* append a trailing NULL to bvstr for printf */
		    for ( ii = 0; ii < sizeof(bvstr); ii++ ) {
			if ( ( bvstr[ii] != '.' ) && ( !isdigit(bvstr[ii]) ) ) {
			  bvstr[ii] = '\0';
			  break;
			}
		    }
		    printf( "This is debufr v3.1.1, built with BUFRLIB v%s\n",
			    bvstr );
		    return 0;
		case 'h':
		    printf( "\nPROGRAM %s\n", argv[0] );
		    printf( "\nABSTRACT: This program decodes a BUFR file and generates a verbose\n" );
		    printf( "  listing of the contents.  If a DX BUFR tables file is specified\n" );
		    printf( "  (using the -f option) or if the specified BUFR file contains an\n" );
		    printf( "  embedded DX BUFR tables message as the first message in the file,\n" );
		    printf( "  then this DX BUFR tables information is used to decode the data\n" );
		    printf( "  messages in the file.  Otherwise, or whenever the -m option is\n" );
		    printf( "  specified, master BUFR tables are read and used to decode the\n" );
		    printf( "  data messages in the file.\n" );
		    prtusage( argv[0] );
		    return 0;
		    break;
		case 'b':
		    basic = 'Y';
		    break;
		case 'm':
		    forcemt = 'Y';
		    break;
		case 'c':
		    cfms = 'N';
		    break;
		case 'o':
		    strcpy ( outfile, optarg );
		    break;
		case 't':
		    strcpy ( tbldir, optarg );
		    break;
		case 'f':
		    strcpy ( wkstr, optarg );
		    break;
		case 'p':
		    strcpy ( prmstg, optarg );
		    break;
	    }
	}

	/*
	**  There should be one remaining command line argument specifying the
	**  input BUFR file.
	*/
	if ( (optind+1) != argc ) {
	    printf( "\nERROR: You must specify an input BUFR file to be decoded!\n" );
	    prtusage( argv[0] );
	    return -1;
        }

	/*
	**  Open the input BUFR file.
	*/
	cobfl( argv[optind], &io );

	/*
	**  Check whether a DX tables file was specified.
	*/
	if ( strlen( wkstr ) > 0 ) {
	    sprintf( tblfil, "%s%c%s", tbldir, '/', wkstr );
	}
	else {
	    strcpy( tblfil, "NULLFILE" );
	}

	/*
	**  Check whether an output file was specified.  If not, make a default
	**  filename in the current working directory using the basename of the
	**  input BUFR file.
	*/
	if ( strlen( outfile ) == 0 ) {
	    strcpy( wkstr2, argv[optind] );
	    strcpy( outfile, basename( wkstr2 ) );
	    strcat( outfile, ".debufr.out" );
	}

	/*
	**  Confirm that the output directory is writeable.
	*/
	strcpy( wkstr2, outfile );
	strcpy( wkstr, dirname( wkstr2 ) );
	if ( access( wkstr, W_OK ) != 0 ) {
	    printf( "\nERROR: Cannot write output file to directory %s\n",
		( strcmp( wkstr, "." ) == 0 ? getcwd( wkstr2, MXFLEN ) : wkstr ) );
	    prtusage( argv[0] );
	    return -1;
	}

	/*
	**  Read and decode each message from the input BUFR file.
	*/
	lentd = (f77int) strlen(tbldir);
	fdebufr( outfile, tbldir, &lentd, tblfil, prmstg, &basic, &forcemt, &cfms,
		 strlen(outfile), strlen(tbldir), strlen(tblfil), strlen(prmstg), 1, 1, 1 );

	/*
	**  Close the input BUFR file.
	*/
	ccbfl( );

	return 0;
}
